
use academicperformancemonitoringsystem;

-- STORED PROCEDURES

-- Procedure to Add a New User
DELIMITER /
CREATE PROCEDURE AddUser(
    IN p_UserID VARCHAR(30),
    IN p_Name VARCHAR(100),
    IN p_Email VARCHAR(100),
    IN p_Password VARCHAR(255),
    IN p_Role ENUM('Admin', 'Teacher', 'Student', 'Parent'),
    IN p_Contact VARCHAR(50)
)
BEGIN
    INSERT INTO Users (UserID, Name, Email, Password, Role, Contact)
    VALUES (p_UserID, p_Name, p_Email, p_Password, p_Role, p_Contact);
END /



-- Call the procedure
CALL AddUser('U022', 'John Doe', 'john@gmail.com', 'securepassword', 'Teacher', '0754610909');


-- Procedure to Retrieve All Students in a Specific Class

CREATE PROCEDURE GetStudentsByClass(IN p_Class VARCHAR(50))
BEGIN
    SELECT u.UserID, u.Name, s.StudentID, s.Class, s.EnrollmentYear
    FROM Students s
    INNER JOIN Users u ON s.UserID = u.UserID
    WHERE s.Class = p_Class;
END /

-- Call the procedure
CALL GetStudentsByClass('Year 1 - Computer Science');


-- Procedure to Retrieve a Teacher's Subjects

CREATE PROCEDURE GetSubjectsByTeacher(IN p_TeacherID VARCHAR(30))
BEGIN
    SELECT s.SubjectID, s.Name AS SubjectName, t.TeacherID, u.Name AS TeacherName
    FROM Subjects s
    INNER JOIN Teachers t ON s.TeacherID = t.TeacherID
    INNER JOIN Users u ON t.UserID = u.UserID
    WHERE t.TeacherID = p_TeacherID;
END /


-- Call the procedure
CALL GetSubjectsByTeacher('T001');
CALL GetSubjectsByTeacher('T002');


-- Procedure to Get a Student's Performance Summary

CREATE PROCEDURE GetStudentPerformance(IN p_StudentID VARCHAR(30))
BEGIN
    SELECT s.Name AS Subject, g.Score, g.ExamDate
    FROM Grades g
    INNER JOIN Subjects s ON g.SubjectID = s.SubjectID
    WHERE g.StudentID = p_StudentID;
END /

-- Call the procedure
-- This shows the subject, score and the exam date of the student
CALL GetStudentPerformance('ST001');


-- Procedure to Retrieve All Alerts for a Student

CREATE PROCEDURE GetStudentAlerts(IN p_StudentID VARCHAR(30))
BEGIN
    SELECT AlertID, Type, Message, Timestamp
    FROM Alerts
    WHERE StudentID = p_StudentID;
END /


-- Call the procedure
CALL GetStudentAlerts('ST001');


-- Procedure to Retrieve All Reports Generated by a Specific Admin

CREATE PROCEDURE GetReportsByAdmin(IN p_AdminID VARCHAR(30))
BEGIN
    SELECT r.ReportID, r.StudentID, u.Name AS StudentName, r.ReportDate, r.PerformanceSummary
    FROM Reports r
    INNER JOIN Students s ON r.StudentID = s.StudentID
    INNER JOIN Users u ON s.UserID = u.UserID
    WHERE r.GeneratedBy = p_AdminID;
END /


-- Call the procedure
CALL GetReportsByAdmin('A001'); 

CALL GetReportsByAdmin('A002'); 


-- Procedure to Count the Number of Users by Role

CREATE PROCEDURE CountUsersByRole(IN p_Role ENUM('Admin', 'Teacher', 'Student', 'Parent'))
BEGIN
    SELECT COUNT(*) AS TotalUsers FROM Users WHERE Role = p_Role;
END /


-- Call the procedure
CALL CountUsersByRole('Student'); 
CALL CountUsersByRole('Teacher'); 

CALL CountUsersByRole('Parent');




-- Procedure to Update a Student's Report

CREATE PROCEDURE UpdateStudentReport(
    IN p_ReportID VARCHAR(30),
    IN p_NewPerformanceSummary TEXT
)
BEGIN
    UPDATE Reports 
    SET PerformanceSummary = p_NewPerformanceSummary, ReportDate = CURDATE()
    WHERE ReportID = p_ReportID;
END /


-- Call the procedure
CALL UpdateStudentReport('R001', 'Student has shown improvement in all subjects, especially in mathematics.');
